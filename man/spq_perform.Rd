% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spq_perform.R
\name{spq_perform}
\alias{spq_perform}
\title{Assemble query parts into a sparql query and send it to endpoint to get a tibble as a result.}
\usage{
spq_perform(
  .query,
  endpoint = lifecycle::deprecated(),
  user_agent = lifecycle::deprecated(),
  max_tries = lifecycle::deprecated(),
  max_seconds = lifecycle::deprecated(),
  timeout = lifecycle::deprecated(),
  request_type = lifecycle::deprecated(),
  dry_run = FALSE,
  replace_prefixes = FALSE
)
}
\arguments{
\item{.query}{a list with elements of the query}

\item{endpoint}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} a string or url corresponding to a SPARQL endpoint. Defaults to "Wikidata"}

\item{user_agent}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} a string indicating the user agent to send with the query.}

\item{max_tries, max_seconds}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} Cap the maximal number of
attemps with \code{max_tries} or the total elapsed time from the first request with \code{max_seconds}.}

\item{timeout}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} maximum number of seconds to wait (\code{httr2::req_timeout()}).}

\item{request_type}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} a string indicating how the query should be sent: in the
URL (\code{url}, default, most common) or as a body form (\code{body-form}).}

\item{dry_run}{Boolean indicating whether to return the output of \code{httr2::req_dry_run()}
rather than of \code{httr2::req_perform()}. Useful for debugging.}

\item{replace_prefixes}{Boolean indicating whether to replace used prefixes in the results table,
for instance making, for instance "http://www.wikidata.org/entity/" "wd:".}
}
\value{
A query object
}
\description{
Assemble query parts into a sparql query and send it to endpoint to get a tibble as a result.
}
\section{Request control}{


Control the way the query is performed via the \code{control_request}
argument of \code{spq_init()}.
This way you can create a basic spq object with all the correct options
corresponding to the SPARQL service you are using, and then use it as
the basis of all your subsequent glitter pipelines.
}

\examples{
\dontrun{
spq_init() \%>\%
  spq_add(.subject="?city",.verb="wdt:P31",.object="wd:Q515") \%>\%
  spq_add(.subject="?city",.verb="wdt:P1082",.object="?pop") \%>\%
  spq_label(city) \%>\%
  spq_head(n=5) \%>\%
  spq_perform()
}

}
