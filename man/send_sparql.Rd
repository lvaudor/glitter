% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/send_sparql.R
\name{send_sparql}
\alias{send_sparql}
\title{Send SPARQL query to endpoint and get tibble as a result}
\usage{
send_sparql(
  .query,
  endpoint = lifecycle::deprecated(),
  user_agent = lifecycle::deprecated(),
  max_tries = lifecycle::deprecated(),
  max_seconds = lifecycle::deprecated(),
  timeout = lifecycle::deprecated(),
  request_type = lifecycle::deprecated(),
  dry_run = FALSE
)
}
\arguments{
\item{.query}{a string corresponding to a SPARQL query}

\item{endpoint}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} a string or url corresponding to a SPARQL endpoint. Defaults to "Wikidata"}

\item{user_agent}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} a string indicating the user agent to send with the query.}

\item{max_tries, max_seconds}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} Cap the maximal number of
attemps with \code{max_tries} or the total elapsed time from the first request with \code{max_seconds}.}

\item{timeout}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} maximum number of seconds to wait (\code{httr2::req_timeout()}).}

\item{request_type}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} a string indicating how the query should be sent: in the
URL (\code{url}, default, most common) or as a body form (\code{body-form}).}

\item{dry_run}{Boolean indicating whether to return the output of \code{httr2::req_dry_run()}
rather than of \code{httr2::req_perform()}. Useful for debugging.}
}
\description{
Send SPARQL query to endpoint and get tibble as a result
}
\details{
Control the way the query is performed via the \code{control_request}
argument of \code{spq_init()}.
This way you can create a basic spq object with all the correct options
corresponding to the SPARQL service you are using, and then use it as
the basis of all your subsequent glitter pipelines.
}
\examples{
metro_query='SELECT ?item ?itemLabel ?coords
{
 ?item wdt:P361 wd:Q1552;
 wdt:P625 ?coords.
 OPTIONAL{?item wdt:P1619 ?date.}
 SERVICE wikibase:label { bd:serviceParam wikibase:language "en" . }
} ORDER BY ?itemLabel
'
send_sparql(metro_query)
}
